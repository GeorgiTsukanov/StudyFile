#include <iostream>
#include <winsock2.h>
#include <string>

#pragma comment(lib, "ws2_32.lib")
using namespace std;

struct Person {
    int weight;
    int height;
    char name[25];
};

struct Answer {
    int IMT;
    char name[25];
};

int main() {

    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);

    WSADATA wsaData;
    SOCKET serverSocket, clientSocket;
    struct sockaddr_in serverAddr, clientAddr;
    int addrLen = sizeof(clientAddr);
    char buffer[sizeof(Person)];

    WSAStartup(MAKEWORD(2, 2), &wsaData);

    serverSocket = socket(AF_INET, SOCK_STREAM, 0);
    if (serverSocket == INVALID_SOCKET) {
        cerr << "Socket creation failed." << endl;
        WSACleanup();
        return 1;
    }

    serverAddr.sin_family = AF_INET;
    serverAddr.sin_port = htons(12345);
    serverAddr.sin_addr.s_addr = INADDR_ANY;

    if (bind(serverSocket, (struct sockaddr*)&serverAddr, sizeof(serverAddr)) == SOCKET_ERROR) {
        cerr << "Bind failed." << endl;
        closesocket(serverSocket);
        WSACleanup();
        return 1;
    }

    listen(serverSocket, 5);
    cout << "Сервер ожидает запрос" << endl;

    while (true) {
        clientSocket = accept(serverSocket, (struct sockaddr*)&clientAddr, &addrLen);
        if (clientSocket == INVALID_SOCKET) {
            cerr << "Accept failed." << endl;
            continue;
        }

        recv(clientSocket, buffer, sizeof(Person), 0);

        Person pers;
        memcpy(&pers, buffer, sizeof(Person));

        cout << "Запрос от " << pers.name << " получен" << endl;

        double IMT = pers.weight / ((0.01 * pers.height) * (0.01 * pers.height));
        int IMT_Category;
        if (IMT >= 18.5 && IMT < 25.0) {
            IMT_Category = 1;
        }
        else if (IMT < 18.5) {
            IMT_Category = 0;
        }
        else {
            IMT_Category = 2;
        }

        Answer answer;
        answer.IMT = IMT_Category;
        memcpy(answer.name, pers.name, sizeof(answer.name));

        send(clientSocket, (char*)&answer, sizeof(Answer), 0);

        cout << "Расчет IMT" << pers.name << " произведён и отправлен" << endl;

        closesocket(clientSocket);
    }

    closesocket(serverSocket);
    WSACleanup();
    return 0;
}
